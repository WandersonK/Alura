-- CREATE TABLE aluno (
-- 	id SERIAL,
-- 	nome VARCHAR(255),
-- 	cpf CHAR(11),
-- 	observacao TEXT,
-- 	idade INTEGER,
-- 	dinheiro NUMERIC(10,2),
-- 	altura REAL,
-- 	ativo BOOLEAN,
-- 	data_nascimento DATE,
-- 	hora_aula TIME,
-- 	matriculado_em TIMESTAMP
-- );

-- select * from aluno;

-- INSERT INTO aluno (
-- 	nome,
-- 	cpf,
-- 	observacao,
-- 	idade,
-- 	dinheiro,
-- 	altura,
-- 	ativo,
-- 	data_nascimento,
-- 	hora_aula,
-- 	matriculado_em
-- )
-- VALUES (
-- 	'Diogo',
-- 	'06627042150',
-- 	'Lorem ipsum dolor sit amet, consectetur adipiscing elit. Pellentesque pulvinar ultricies sapien eget lobortis. Aliquam euismod, erat sed suscipit volutpat, massa ex sagittis lectus, at pretium est est in dui. Duis at lobortis risus. Morbi et turpis nisi. Nunc arcu erat, suscipit iaculis magna quis, venenatis dapibus risus. Quisque ultricies dolor sapien, eu fringilla ante fringilla eu. Aliquam vitae molestie lectus. Donec a posuere est, ac sollicitudin ex. Etiam consectetur metus eget eros viverra, aliquam hendrerit eros blandit. Duis congue mi et turpis iaculis vehicula. Curabitur eu mi luctus, tristique metus vel, efficitur nunc. Nullam eget turpis ligula. Maecenas quis pulvinar ipsum.',
-- 	24,
-- 	30000,
-- 	1.70,
-- 	TRUE,
-- 	'1996-12-01',
-- 	'17:30:00',
-- 	'2021-11-11 21:10:10'	
-- );

-- SELECT *
-- 	FROM aluno
-- 	WHERE id = 1;
	
	
-- UPDATE aluno
-- 	SET nome = 'Katsumoto Wan',
-- 		cpf = '06627042161',
-- 		observacao = 'Teste de Update',
-- 		idade = 25,
-- 		dinheiro = 150.55,
-- 		altura = 1.89,
-- 		ativo = FALSE,
-- 		data_nascimento = '1996-12-16',
-- 		hora_aula = '18:00:00',
-- 		matriculado_em = '2021-11-12 08:33:05'
-- 	WHERE id = 1;


-- SELECT *
-- 	FROM aluno
-- 	WHERE nome = 'Katsumoto Wan';


-- DELETE
-- 	FROM aluno
-- 	WHERE nome = 'Wanderson';


-- SELECT nome AS "Nome_do_Aluno",
-- 	   idade,
-- 	   matriculado_em AS quando_se_matriculou
-- 	FROM aluno;
	

-- INSERT INTO aluno (nome) VALUES ('Vinicius Dias');
-- INSERT INTO aluno (nome) VALUES ('Nico Steppat');
-- INSERT INTO aluno (nome) VALUES ('João Roberto');
-- INSERT INTO aluno (nome) VALUES ('Diego');
	
-- SELECT *
-- 	FROM aluno
-- 	WHERE nome LIKE '%a%n';
	
-- SELECT *
-- 	FROM aluno
-- 	WHERE idade <> 36;

-- SELECT *
-- 	FROM aluno
-- 	WHERE idade < 100;


-- SELECT *
-- 	FROM aluno
-- 	WHERE idade BETWEEN 10 AND 24;
	
	
-- SELECT *
-- 	FROM aluno
-- 	WHERE ativo = true;
	
	
-- SELECT *
-- 	FROM aluno
-- 	WHERE ativo IS NULL;
	

-- SELECT *
-- 	FROM aluno
-- 	WHERE nome LIKE 'D%'
-- 	AND cpf IS NOT NULL;


-- SELECT *
-- 	FROM aluno
-- 	WHERE nome LIKE 'Diogo'
-- 	OR nome LIKE 'Rodrigo'
-- 	OR nome LIKE 'Nico%';
	

-- SELECT *
-- 	FROM aluno
-- 	WHERE nome LIKE '%Steppat'
-- 	AND nome LIKE 'Nico%';
	
	
-- SELECT *
-- 	FROM aluno
-- 	WHERE nome LIKE 'Diogo'
-- 	OR nome LIKE 'Nico%';

-- DROP TABLE curso;
-- CREATE TABLE curso (
-- 	id INTEGER NOT NULL UNIQUE,
-- 	nome VARCHAR (255) NOT NULL
-- );

-- CREATE TABLE curso (
-- 	id INTEGER PRIMARY KEY,
-- 	nome VARCHAR (255) NOT NULL
-- );

-- INSERT INTO curso (id, nome) VALUES (NULL, NULL); -- Inválido
-- INSERT INTO curso (id, nome) VALUES (1, NULL); -- Inválido
-- INSERT INTO curso (id, nome) VALUES (NULL, 'HTML'); -- Inválido

-- INSERT INTO curso (id, nome) VALUES (1, 'HTML');
-- INSERT INTO curso (id, nome) VALUES (2, 'JavaScript');

-- SELECT * FROM curso;

-- DROP TABLE aluno;

-- CREATE TABLE aluno (
-- 	id SERIAL PRIMARY KEY,
-- 	nome VARCHAR(255) NOT NULL
-- );

-- INSERT INTO aluno (nome) VALUES ('Diogo');
-- INSERT INTO aluno (nome) VALUES ('Vinicius');

-- SELECT * FROM aluno;


-- DROP TABLE aluno_curso;

-- /*
-- FOREIGN KEY (CAMPO_NA_TABELA_ORIGEM)
-- REFERENCES TABELA_DESTINO (CAMPO_TABELA_DESTINO)
-- 	ON UPDATE OPÇÃO
-- 	ON DELETE OPÇÃO
-- */
--  --OPÇÕES (RESTRICT, CASCADE)

-- CREATE TABLE aluno_curso (
-- 	aluno_id INTEGER,
-- 	curso_id INTEGER,
-- 	PRIMARY KEY (aluno_id, curso_id),
	
-- 	FOREIGN KEY (aluno_id)
-- 	REFERENCES aluno (id),
	
-- 	FOREIGN KEY (curso_id)
-- 	REFERENCES curso (id)
-- );

-- INSERT INTO aluno_curso (aluno_id, curso_id) VALUES (1,1);
-- INSERT INTO aluno_curso (aluno_id, curso_id) VALUES (2,1);

-- INSERT INTO aluno_curso (aluno_id, curso_id) VALUES (3,1); -- Inválido para esta situação
-- INSERT INTO aluno_curso (aluno_id, curso_id) VALUES (1,3); -- Inválido para esta situação

-- SELECT * FROM aluno WHERE id = 1;
-- SELECT * FROM curso WHERE id = 1;

-- SELECT * FROM aluno WHERE id = 2;
-- SELECT * FROM curso WHERE id = 1;

-- SELECT * FROM aluno WHERE id = 3;
-- SELECT * FROM curso WHERE id = 1;


-- SELECT * FROM aluno;
-- SELECT * FROM curso;

-- SELECT aluno.nome as "Nome do Aluno",
-- 	   curso.nome as "Nome do Curso"
-- 	FROM aluno
-- 	JOIN aluno_curso ON aluno_curso.aluno_id = aluno.id
-- 	JOIN curso		 ON curso.id			 = aluno_curso.curso_id;
	
-- INSERT INTO aluno_curso (aluno_id, curso_id) VALUES (2,2);


-- /* -- Feito por mim pra testar
-- SELECT aluno.nome as "Nome do Aluno",
-- 	   curso.nome as "Nome do Curso"
-- 	FROM curso
-- 	JOIN aluno_curso ON aluno_curso.curso_id = curso.id
-- 	JOIN aluno		 ON aluno.id			 = aluno_curso.aluno_id;
-- */

-- INSERT INTO aluno (nome) VALUES ('Nico');
-- INSERT INTO curso (id, nome) VALUES (3, 'CSS');
 
-- SELECT aluno.nome as "Nome do Aluno",
-- 	   curso.nome as "Nome do Curso"
-- 	FROM aluno
-- 	LEFT JOIN aluno_curso ON aluno_curso.aluno_id = aluno.id
-- 	LEFT JOIN curso		  ON curso.id			  = aluno_curso.curso_id;


-- SELECT aluno.nome as "Nome do Aluno",
-- 	   curso.nome as "Nome do Curso"
-- 	FROM aluno
-- 	RIGHT JOIN aluno_curso ON aluno_curso.aluno_id = aluno.id
-- 	RIGHT JOIN curso		  ON curso.id			  = aluno_curso.curso_id;


-- SELECT aluno.nome as "Nome do Aluno",
-- 	   curso.nome as "Nome do Curso"
-- 	FROM aluno
-- 	FULL JOIN aluno_curso ON aluno_curso.aluno_id = aluno.id
-- 	FULL JOIN curso		  ON curso.id			  = aluno_curso.curso_id;


-- SELECT aluno.nome as "Nome do Aluno",
-- 	   curso.nome as "Nome do Curso"
-- 	FROM aluno
-- 	CROSS JOIN curso;

-- INSERT INTO aluno (nome) VALUES ('João');

-- SELECT * FROM aluno;
-- SELECT * FROM curso;
-- SELECT * FROM aluno_curso;

-- DELETE FROM aluno WHERE id = 1;

-- DROP TABLE aluno_curso;

-- CREATE TABLE aluno_curso (
-- 	aluno_id INTEGER,
-- 	curso_id INTEGER,
-- 	PRIMARY KEY (aluno_id, curso_id),
	
-- 	FOREIGN KEY (aluno_id)
-- 	REFERENCES aluno (id)
-- 	ON DELETE CASCADE,
	
-- 	FOREIGN KEY (curso_id)
-- 	REFERENCES curso (id)
-- );

-- INSERT INTO aluno_curso (aluno_id, curso_id) VALUES (1,1);
-- INSERT INTO aluno_curso (aluno_id, curso_id) VALUES (2,1);

-- INSERT INTO aluno_curso (aluno_id, curso_id) VALUES (3,1);
-- INSERT INTO aluno_curso (aluno_id, curso_id) VALUES (1,3);


-- SELECT aluno.nome as "Nome do Aluno",
-- 	   curso.nome as "Nome do Curso"
-- 	FROM aluno
-- 	JOIN aluno_curso ON aluno_curso.aluno_id = aluno.id
-- 	JOIN curso		 ON curso.id			 = aluno_curso.curso_id;

-- SELECT * FROM aluno;

-- UPDATE aluno
-- 	SET id = 10
-- 	WHERE id = 2;
	
-- UPDATE aluno
-- 	SET id = 20
-- 	WHERE id = 4;


-- DROP TABLE aluno_curso;

-- CREATE TABLE aluno_curso (
-- 	aluno_id INTEGER,
-- 	curso_id INTEGER,
-- 	PRIMARY KEY (aluno_id, curso_id),
	
-- 	FOREIGN KEY (aluno_id)
-- 	REFERENCES aluno (id)
-- 	ON DELETE CASCADE
-- 	ON UPDATE CASCADE,
	
-- 	FOREIGN KEY (curso_id)
-- 	REFERENCES curso (id)
-- );


-- INSERT INTO aluno_curso (aluno_id, curso_id) VALUES (2,1);
-- INSERT INTO aluno_curso (aluno_id, curso_id) VALUES (3,1);


-- SELECT
-- 		aluno.id   AS "Aluno ID",
-- 		aluno.nome AS "Nome do Aluno",
-- 		curso.id   AS "Curso ID",
-- 		curso.nome AS "Nome do Curso"
-- 	FROM aluno
-- 	JOIN aluno_curso ON aluno_curso.aluno_id = aluno.id
-- 	JOIN curso		 ON curso.id			 = aluno_curso.curso_id;

-- UPDATE aluno
-- 	SET id = 10
-- 	WHERE id = 2;

-- SELECT * FROM aluno_curso;

-- DROP TABLE funcionarios;
-- CREATE TABLE funcionarios (
-- 	id SERIAL PRIMARY KEY,
-- 	matricula VARCHAR(10),
-- 	nome VARCHAR(255),
-- 	sobrenome VARCHAR(255)
-- );

-- INSERT INTO funcionarios (matricula, nome, sobrenome) VALUES ('M001','Diogo','Mascarenhas');
-- INSERT INTO funcionarios (matricula, nome, sobrenome) VALUES ('M002','Vinícius','Dias');
-- INSERT INTO funcionarios (matricula, nome, sobrenome) VALUES ('M003','Nico','Steppat');
-- INSERT INTO funcionarios (matricula, nome, sobrenome) VALUES ('M004','João','Roberto');
-- INSERT INTO funcionarios (matricula, nome, sobrenome) VALUES ('M005','Diogo','Mascarenhas');
-- INSERT INTO funcionarios (matricula, nome, sobrenome) VALUES ('M006','Wanderson','Silva');
-- INSERT INTO funcionarios (matricula, nome, sobrenome) VALUES ('M007','Diogo','Oliveira');

-- SELECT *
-- 	FROM funcionarios
-- 	ORDER BY nome, matricula;

-- SELECT *
-- 	FROM funcionarios
-- 	ORDER BY nome, matricula DESC;

-- -- Ordenando pela posição da coluna, por exemplo a coluna de posição 4 (sobrenome)
-- SELECT *
-- 	FROM funcionarios
-- 	ORDER BY 4;
	
-- SELECT *
-- 	FROM funcionarios
-- 	ORDER BY 3, 4, 2; -- Ordenando pela posição, (nome, sobrenome, matricula)
	
-- SELECT *
-- 	FROM funcionarios
-- 	ORDER BY 4 DESC, nome DESC, 2 ASC; -- Não precisa colocar o "ASC", pois por padrão já é ordenado como Ascendente.

-- SELECT *
-- 	FROM funcionarios
-- 	ORDER BY id
-- 	LIMIT 5
-- 	OFFSET 3; -- Até q linha deve pular, ou seja, vai começar a contagem a partir do id 4, pois do 1 ao 5 pulou.

/*
COUNT - Retorna a quantidade de registros
SUM   - Retorna a soma dos registros
MAX   - Retorna o maior valor dos registros
MIN   - Retorna o menor valor dos registros
AVG   - Retorna a média dos registros
*/

-- SELECT COUNT(id) -- Aceita também o *
-- 	FROM funcionarios;
	
-- SELECT COUNT(id),
-- 	SUM(id),
-- 	MAX(id),
-- 	MIN(id),
-- 	AVG(id) -- Pode limitar os zeros após a vírgula com o "ROUND (AVG(id), 2)", onde o "2" seriam a quantidade de casas, se não quiser nem uma, coloca 0.
-- 	FROM funcionarios;

-- SELECT DISTINCT -- Traz somente os valores distintos
-- 	   nome, -- Se trouxer somente nome, apenas um Diogo vai ser apresentado
-- 	   sobrenome -- Se trouxer mais de uma coluna, apresenta Diogo Oliveira e Mascarenhas, um de cada, já q Mascarenhas possue 2
-- 	FROM funcionarios
-- 	ORDER BY nome;
	
-- SELECT
-- 	   nome,
-- 	   sobrenome,
-- 	COUNT(id)
-- 	FROM funcionarios
-- 	GROUP BY nome, sobrenome
-- 	ORDER BY nome;
	
-- SELECT
-- 	   nome,
-- 	   sobrenome,
-- 	COUNT(id)
-- 	FROM funcionarios
-- 	GROUP BY 1, 2 -- Agrupando pela posição
-- 	ORDER BY nome;

-- INSERT INTO aluno_curso (aluno_id, curso_id) VALUES (20,3);

-- SELECT * FROM curso;
-- SELECT curso.nome,
-- 	COUNT(aluno.id)
-- 	FROM aluno
-- 	JOIN aluno_curso ON aluno.id = aluno_curso.aluno_id
-- 	JOIN curso ON curso.id = aluno_curso.curso_id
-- GROUP BY 1
-- ORDER BY 1;

-- SELECT * FROM aluno;
-- SELECT * FROM aluno_curso;
-- SELECT * FROM curso;

-- SELECT *
-- 	FROM curso
-- 	LEFT JOIN aluno_curso ON aluno_curso.curso_id = curso.id
-- 	LEFT JOIN aluno ON aluno.id = aluno_curso.aluno_id;
	
-- SELECT curso.nome,
-- 	COUNT(aluno.id)
-- 	FROM curso
-- 	LEFT JOIN aluno_curso ON aluno_curso.curso_id = curso.id
-- 	LEFT JOIN aluno ON aluno.id = aluno_curso.aluno_id
-- 	-- WHERE COUNT(aluno.id) = 0 -- Aqui da erro
-- 	-- WHERE curso.nome = 'JavaScript'
-- 	GROUP BY 1 -- nome
-- 	HAVING COUNT(aluno.id) > 0;

SELECT nome,
	COUNT(id)
	FROM funcionarios
	GROUP BY nome
	HAVING COUNT(id) > 1; -- Conferindo nomes duplicados, para conferir os não duplicados, coloca "= 1"



